<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" paddingLeft="0" paddingTop="0" paddingRight="0" paddingBottom="0">
    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.rpc.events.ResultEvent;

        private var processDefineXml:XML;
        private var processEngineName:String;
        private var processDefineId:String;
        private var xmlFile:FileReference;
        private var fileName:String;

        private function init():void {
            processEngineService.send();

            Security.allowDomain("*");

            xmlFile = new FileReference();
            xmlFile.addEventListener(Event.SELECT, selectFileHandler);
            xmlFile.addEventListener(Event.COMPLETE, completeHandler);
        }

        private function selectFileHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            Alert.show(file.name);
            file.load();
        }

        private function completeHandler(event:Event):void {
            processDefineXml = XML(event.target.data);
            ta_xmlStr.text = processDefineXml.toXMLString();
            drawProcessImage();
        }

        private function handleProcessEngineTreeClick():void {
            if (processEngineTree.selectedItem == null) {
                return;
            }
            trace(processEngineTree.selectedItem.@id);
            if (processEngineTree.getParentItem(processEngineTree.selectedItem) == null) { // 流程引擎对象
                // 清空数据
                dg_processEngine.dataProvider = null;
                // 选中，并添加数据
                propAccordion.selectedIndex = 0;
                processEngineName = processEngineTree.selectedItem.@id;
                addItemToDataGrid(dg_processEngine, processEngineTree.selectedItem as XML);

                // 请求流程引擎配置信息
                processEngineConfigurationService.request.processEngineName = processEngineName;
                processEngineConfigurationService.send();

            } else { // 流程定义对象
                // 清除数据
                dg_processDefinition.dataProvider = null;
                dg_historicActivityInstance.dataProvider = null;
                dg_historicTaskInstance.dataProvider = null;
                dg_historicDetail.dataProvider = null;

                historyNavigator.selectedIndex = 0;
                propAccordion.selectedIndex = 1;
                processEngineName = processEngineTree.getParentItem(processEngineTree.selectedItem).@id;
                processDefineId = encodeURI(processEngineTree.selectedItem.@id);

                // 请求流程图
                processImage.source = "http://localhost:8088/process?method=getImage&processEngineName=" + processEngineName + "&processDefineId=" + processDefineId;
                processDefXml.send();

                // 请求流程定义
                processDefineService.request.processEngineName = processEngineName;
                processDefineService.request.processDefineId = processDefineId;
                processDefineService.send();

                // 请求流程实例
                requestProcessInstance();

                // 获取流程实例历史信息
                dg_historicProcessInstance.dataProvider = null;
                historicProcessInstanceService.request.processEngineName = processEngineName;
                historicProcessInstanceService.request.processDefineId = processDefineId;
                historicProcessInstanceService.send();
            }
        }

        private static function addItemToDataGrid(dg:DataGrid, xml:XML):void {
            var attNamesList:XMLList = xml.@*;
            var dataProvider:Object = dg.dataProvider;
            var ac:ArrayCollection;
            if (dataProvider == null) {
                ac = new ArrayCollection();
            } else {
                ac = dataProvider as ArrayCollection;
            }

            for (var i:int = 0; i < attNamesList.length(); i++) {
                ac.addItem({name:attNamesList[i].name(), value:attNamesList[i].toString()});
            }
            dg.dataProvider = ac;
        }

        private function handlerProcessEngineConfigurationService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            addItemToDataGrid(dg_processEngine, xml.children()[0]);
        }

        private function handlerProcessDefineService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            addItemToDataGrid(dg_processDefinition, xml.children()[0]);
        }

        private function handlerProcessInstanceService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_processInstance.dataProvider = xml.children();
        }

        private function handleProcessInstanceDgClick():void {
            var processInstanceId:String = dg_processInstance.selectedItem.@id;

            propAccordion.selectedIndex = 2;
            historyNavigator.selectedIndex = 1;
            // 获取流程实例变量
            dg_variables.dataProvider = null;
            processInstanceVariableService.request.processEngineName = processEngineName;
            processInstanceVariableService.request.processInstanceId = processInstanceId;
            processInstanceVariableService.send();

            // 获取流程实例任务
            dg_tasks.dataProvider = null;
            processInstanceTaskService.request.processEngineName = processEngineName;
            processInstanceTaskService.request.processInstanceId = processInstanceId;
            processInstanceTaskService.send();

            // 获取活动实例历史信息
            dg_historicActivityInstance.dataProvider = null;
            historicActivityInstanceService.request.processEngineName = processEngineName;
            historicActivityInstanceService.request.processInstanceId = processInstanceId;
            historicActivityInstanceService.send();

            // 获取流程实例历史信息
            dg_historicProcessInstance.dataProvider = null;
            historicProcessInstanceService.request.processEngineName = processEngineName;
            historicProcessInstanceService.request.processInstanceId = processInstanceId;
            historicProcessInstanceService.send();

            // 获取任务实例历史信息
            historicTaskInstanceService.request.processEngineName = processEngineName;
            historicTaskInstanceService.request.processInstanceId = processInstanceId;
            historicTaskInstanceService.send();

            // 获取历史详细信息
            historicDetailService.request.processEngineName = processEngineName;
            historicDetailService.request.processInstanceId = processInstanceId;
            historicDetailService.send();
        }

        private function processDefXmlHandler(event:ResultEvent):void {
            processDefineXml = XML(event.result);
            drawProcessImage();
            ta_xmlStr.text = processDefineXml.toXMLString();
        }

        private function drawProcessImage():void {
            // 清空画布
            this.canvas.graphics.clear();

            var processIcon:ProcessIcon = new ProcessIcon(null);
            processIcon.x = 0;
            processIcon.y = 0;
            canvas.addChild(processIcon);

            var model:Namespace = processDefineXml.namespace();
            var bpmndi:Namespace = processDefineXml.namespace("bpmndi");
            var dc:Namespace = processDefineXml.namespace("dc");
            var di:Namespace = processDefineXml.namespace("di");

            var i:int;
            var startEventArray:Array = new Array();
            var endEventArray:Array = new Array();
            var userTaskArray:Array = new Array();
            var exclusiveGatewayArray:Array = new Array();
            var parallelGatewayArray:Array = new Array();
            var serviceTaskArray:Array = new Array();


            var processNodeList:XMLList = processDefineXml.model::process.*;
            var node:XML;

            for (i = 0; i < processNodeList.length(); i++) {
                node = processNodeList[i];
//                Alert.show(node.localName());
                if ("startEvent" == node.localName()) {
                    startEventArray.push(node.@id.toString());
                } else if ("endEvent" == node.localName()) {
                    endEventArray.push(node.@id.toString());
                } else if ("userTask" == node.localName()) {
                    userTaskArray.push(node.@id.toString());
                } else if ("exclusiveGateway" == node.localName()) {
                    exclusiveGatewayArray.push(node.@id.toString());
                } else if ("parallelGateway" == node.localName()) {
                    parallelGatewayArray.push(node.@id.toString());
                } else if ("serviceTask" == node.localName()) {
                    serviceTaskArray.push(node.@id.toString());
                }
            }
//            Alert.show(startEventArray.join());

            var xmlList:XMLList = processDefineXml.bpmndi::BPMNDiagram..bpmndi::BPMNShape; // 图形
//            Alert.show(xmlList.length());

            var baseX:Number = 0;
            var baseY:Number = -50;
            trace("basX = " + baseX + ", basY = " + baseY);
            var x:Number, y:Number, width:Number, height:Number, bpmnElement:String;
            for (i = 0; i < xmlList.length(); i++) {
                bpmnElement = xmlList[i].@bpmnElement;
                x = baseX + Number(xmlList[i].dc::Bounds.@x);
                y = baseY + Number(xmlList[i].dc::Bounds.@y);
                width = Number(xmlList[i].dc::Bounds.@width);
                height = Number(xmlList[i].dc::Bounds.@height);

                if (startEventArray.indexOf(bpmnElement) != -1) { // 开始节点
//                    Alert.show("Draw startEvent : " + bpmnElement)
                    canvas.graphics.lineStyle(1, 0x000000);
                    canvas.graphics.drawCircle(x + width / 2, y + height / 2, 15);
                } else if (endEventArray.indexOf(bpmnElement) != -1) { // 结束节点
//                    Alert.show("Draw endEvent : " + bpmnElement)
                    canvas.graphics.lineStyle(4, 0x000000);
                    canvas.graphics.drawCircle(x + width / 2, y + height / 2, 15);
                } else if (exclusiveGatewayArray.indexOf(bpmnElement) != -1) {
                    canvas.graphics.lineStyle(1, 0x123456);
                    drawRhombus(canvas.graphics, x, y, width, height);
                }

                else {
//                    Alert.show("Draw Rect : " + bpmnElement)
                    canvas.graphics.lineStyle(1, 0x123456);
                    canvas.graphics.drawRect(x, y, width, height);
                }
//                Alert.show(processNode.length());
//                Alert.show(processNode.name().toString());
            }

            xmlList = processDefineXml.bpmndi::BPMNDiagram..bpmndi::BPMNEdge; // 画线
            for (i = 0; i < xmlList.length(); i++) {
                canvas.graphics.lineStyle(1, 0x000000);

                var waypointList:XMLList = xmlList[i].di::waypoint;
                var startX:Number = 0, startY:Number = 0;
                for (var j:int = 0; j < waypointList.length(); j++) {
                    if (startX > 0 && startY > 0) {
                        canvas.graphics.moveTo(startX, startY);
                        canvas.graphics.lineTo(baseX + Number(waypointList[j].@x), baseY + Number(waypointList[j].@y));
                    }

                    startX = baseX + Number(waypointList[j].@x);
                    startY = baseY + Number(waypointList[j].@y);
                }
            }
        }

        // 画菱形
        private static function drawRhombus(graphics:Graphics, x:Number, y:Number, width:Number, height:Number):void {
            graphics.moveTo(x, y + height / 2);
            graphics.lineTo(x + width / 2, y);
            graphics.lineTo(x + width, y + height / 2);
            graphics.lineTo(x + width / 2, y + height);
            graphics.lineTo(x, y + height / 2);
        }

        private function startProcess():void {
            if (processEngineName != null && processDefineId != null) {
                startProcessService.request.processEngineName = processEngineName;
                startProcessService.request.processDefineId = processDefineId;
                startProcessService.send();
            }

        }

        private function startProcessHandler(event:ResultEvent):void {
            // 请求流程实例
            requestProcessInstance();
        }

        private function handlerVariablesService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_variables.dataProvider = xml.children();
        }

        private function handlerProcessInstanceTasksService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_tasks.dataProvider = xml.children();
        }

        private function handleTasksDgClick():void {
            propAccordion.selectedIndex = 2;

            // 获取流程实例任务变量
            dg_variables.dataProvider = null;
            taskVariableService.request.processEngineName = processEngineName;
            taskVariableService.request.taskId = dg_tasks.selectedItem.@id;
            taskVariableService.send();
        }

        private function handlerHistoricActivityInstanceService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_historicActivityInstance.dataProvider = xml.children();
        }

        private function handlerHistoricProcessInstanceService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_historicProcessInstance.dataProvider = xml.children();
        }

        private function handlerHistoricTaskInstanceService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_historicTaskInstance.dataProvider = xml.children();
        }

        private function handlerHistoricDetailService(event:ResultEvent):void {
            var xml:XML = XML(event.result);
            dg_historicDetail.dataProvider = xml.children();
        }

        private function requestProcessInstance():void {
            dg_processInstance.dataProvider = null;
            processInstanceService.request.processEngineName = processEngineName;
            processInstanceService.request.processDefineId = processDefineId;
            processInstanceService.send();
        }

        private function openFile():void {
            xmlFile.browse(getTypeFilter());
        }

        private static function getTypeFilter():Array {
            var imagesFilter:FileFilter = new FileFilter("BPMN 2.0 Xml (*.xml)", "*.xml");
            return [imagesFilter];
        }

        private function deployProcess():void {

        }
        ]]></mx:Script>

    <mx:HTTPService id="processEngineService" url="http://localhost:8088/process?method=getProcessEngines" resultFormat="e4x"/>
    <mx:XMLListCollection id="processEngineList" source="{processEngineService.lastResult.list}"/>
    <mx:HTTPService id="processEngineConfigurationService" url="http://localhost:8088/process?method=getProcessEngineConfiguration" resultFormat="xml" result="handlerProcessEngineConfigurationService(event)"/>
    <mx:HTTPService id="processDefineService" url="http://localhost:8088/process?method=getProcessDefineById" resultFormat="xml" result="handlerProcessDefineService(event)"/>
    <mx:HTTPService id="processInstanceService" url="http://localhost:8088/process?method=getProcessInstance" resultFormat="xml" result="handlerProcessInstanceService(event)"/>
    <mx:HTTPService id="processDefXml" url="http://localhost:8088/process?method=getProcessDefXml" result="processDefXmlHandler(event)" resultFormat="xml"/>
    <mx:HTTPService id="startProcessService" url="http://localhost:8088/process?method=startProcess" result="startProcessHandler(event)"/>
    <mx:HTTPService id="processInstanceVariableService" url="http://localhost:8088/process?method=getProcessInstanceVariables" resultFormat="xml" result="handlerVariablesService(event)"/>
    <mx:HTTPService id="processInstanceTaskService" url="http://localhost:8088/process?method=getProcessInstanceTasks" resultFormat="xml" result="handlerProcessInstanceTasksService(event)"/>
    <mx:HTTPService id="taskVariableService" url="http://localhost:8088/process?method=getTaskVariables" resultFormat="xml" result="handlerVariablesService(event)"/>

    <mx:HTTPService id="historicActivityInstanceService" url="http://localhost:8088/process?method=getHistoricActivityInstance" resultFormat="xml" result="handlerHistoricActivityInstanceService(event)"/>
    <mx:HTTPService id="historicProcessInstanceService" url="http://localhost:8088/process?method=getHistoricProcessInstance" resultFormat="xml" result="handlerHistoricProcessInstanceService(event)"/>
    <mx:HTTPService id="historicTaskInstanceService" url="http://localhost:8088/process?method=getHistoricTaskInstance" resultFormat="xml" result="handlerHistoricTaskInstanceService(event)"/>
    <mx:HTTPService id="historicDetailService" url="http://localhost:8088/process?method=getHistoricDetail" resultFormat="xml" result="handlerHistoricDetailService(event)"/>

    <mx:HDividedBox width="100%" height="100%">
        <mx:VBox width="17%" height="100%">
            <mx:TabNavigator width="100%" height="100%">
                <mx:Canvas label="流程引擎">
                    <mx:Tree width="100%" id="processEngineTree" height="100%" dataProvider="{processEngineList}" labelField="@id" click="handleProcessEngineTreeClick()"/>
                </mx:Canvas>

                <mx:Canvas label="用户">

                </mx:Canvas>
            </mx:TabNavigator>

        </mx:VBox>

        <mx:VBox width="62%" height="100%">
            <mx:DataGrid width="100%" height="20%" id="dg_processInstance" itemClick="handleProcessInstanceDgClick()">
                <mx:columns>
                    <mx:DataGridColumn headerText="Id" dataField="@id"/>
                    <mx:DataGridColumn headerText="ProcessInstanceId" dataField="@processInstanceId"/>
                    <mx:DataGridColumn headerText="Ended" dataField="@ended"/>
                    <mx:DataGridColumn headerText="BusinessKey" dataField="@businessKey"/>
                    <mx:DataGridColumn headerText="ProcessDefinitionId" dataField="@processDefinitionId"/>
                    <mx:DataGridColumn headerText="Suspended" dataField="@suspended"/>
                </mx:columns>
            </mx:DataGrid>

            <mx:Canvas width="100%" height="60%">
                <mx:Button label="打开" right="160" y="0" click="openFile()"/>
                <mx:Button label="部署" right="100" y="0" click="deployProcess()"/>
                <mx:Button label="启动流程" right="20" y="0" click="startProcess()"/>

                <mx:TabNavigator width="100%" height="100%" creationPolicy="all" x="0" y="5">
                    <mx:HBox label="流程图" id="imageBox">
                        <mx:Image id="processImage"/>
                    </mx:HBox>
                    <mx:Canvas label="流程图画布" id="canvas" width="100%"/>
                    <mx:HBox label="BPMN2.0文件" paddingTop="0">
                        <mx:TextArea id="ta_xmlStr" width="100%" height="100%"/>
                    </mx:HBox>
                </mx:TabNavigator>
            </mx:Canvas>

            <mx:Canvas width="100%" height="20%">
                <mx:TabNavigator id="historyNavigator" width="100%" height="100%" creationPolicy="all" x="0" y="0">
                    <mx:HBox label="流程实例历史">
                        <mx:DataGrid width="100%" height="100%" id="dg_historicProcessInstance">
                            <mx:columns>
                                <mx:DataGridColumn headerText="Id" dataField="@id"/>
                                <mx:DataGridColumn headerText="BusinessKey" dataField="@businessKey"/>
                                <mx:DataGridColumn headerText="ProcessDefinitionId" dataField="@processDefinitionId"/>
                                <mx:DataGridColumn headerText="StartActivityId" dataField="@startActivityId"/>
                                <mx:DataGridColumn headerText="StartUserId" dataField="@startUserId"/>
                                <mx:DataGridColumn headerText="StartTime" dataField="@startTime"/>
                                <mx:DataGridColumn headerText="EndTime" dataField="@endTime"/>
                                <mx:DataGridColumn headerText="DurationInMillis" dataField="@durationInMillis"/>
                                <mx:DataGridColumn headerText="SupperProcessInstanceId" dataField="@supperProcessInstanceId"/>
                                <mx:DataGridColumn headerText="DeleteReason" dataField="@deleteReason"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:HBox>

                    <mx:HBox label="活动历史">
                        <mx:DataGrid width="100%" height="100%" id="dg_historicActivityInstance">
                            <mx:columns>
                                <mx:DataGridColumn headerText="Id" dataField="@id"/>
                                <mx:DataGridColumn headerText="ActivityId" dataField="@activityId"/>
                                <mx:DataGridColumn headerText="ActivityName" dataField="@activityName"/>
                                <mx:DataGridColumn headerText="ActivityType" dataField="@activityType"/>
                                <mx:DataGridColumn headerText="Assignee" dataField="@assignee"/>
                                <mx:DataGridColumn headerText="DurationInMillis" dataField="@durationInMillis"/>
                                <mx:DataGridColumn headerText="StartTime" dataField="@startTime"/>
                                <mx:DataGridColumn headerText="EndTime" dataField="@endTime"/>
                                <mx:DataGridColumn headerText="ExecutionId" dataField="@executionId"/>
                                <mx:DataGridColumn headerText="ProcessDefinitionId" dataField="@processDefinitionId"/>
                                <mx:DataGridColumn headerText="ProcessInstanceId" dataField="@processInstanceId"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:HBox>

                    <mx:HBox label="任务列表">
                        <mx:DataGrid width="100%" height="100%" verticalScrollPolicy="auto" id="dg_tasks" itemClick="handleTasksDgClick()">
                            <mx:columns>
                                <mx:DataGridColumn headerText="Id" dataField="@id"/>
                                <mx:DataGridColumn headerText="Name" dataField="@name"/>
                                <mx:DataGridColumn headerText="Description" dataField="@description"/>
                                <mx:DataGridColumn headerText="Priority" dataField="@priority"/>
                                <mx:DataGridColumn headerText="Owner" dataField="@owner"/>
                                <mx:DataGridColumn headerText="Assignee" dataField="@assignee"/>
                                <mx:DataGridColumn headerText="CreateTime" dataField="@createTime"/>
                                <mx:DataGridColumn headerText="DueDate" dataField="@dueDate"/>
                                <mx:DataGridColumn headerText="DelegationState" dataField="@delegationState"/>
                                <mx:DataGridColumn headerText="TaskDefinitionKey" dataField="@taskDefinitionKey"/>
                                <mx:DataGridColumn headerText="ExecutionId" dataField="@executionId"/>
                                <mx:DataGridColumn headerText="ProcessInstanceId" dataField="@processInstanceId"/>
                                <mx:DataGridColumn headerText="ProcessDefinitionId" dataField="@processDefinitionId"/>
                                <mx:DataGridColumn headerText="ParentTaskId" dataField="@parentTaskId("/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:HBox>

                    <mx:HBox label="任务历史">
                        <mx:DataGrid width="100%" height="100%" id="dg_historicTaskInstance">
                            <mx:columns>
                                <mx:DataGridColumn headerText="Id" dataField="@id"/>
                                <mx:DataGridColumn headerText="BusinessKey" dataField="@businessKey"/>
                                <mx:DataGridColumn headerText="ProcessDefinitionId" dataField="@processDefinitionId"/>
                                <mx:DataGridColumn headerText="StartActivityId" dataField="@startActivityId"/>
                                <mx:DataGridColumn headerText="StartUserId" dataField="@startUserId"/>
                                <mx:DataGridColumn headerText="StartTime" dataField="@startTime"/>
                                <mx:DataGridColumn headerText="EndTime" dataField="@endTime"/>
                                <mx:DataGridColumn headerText="DurationInMillis" dataField="@durationInMillis"/>
                                <mx:DataGridColumn headerText="SupperProcessInstanceId" dataField="@supperProcessInstanceId"/>
                                <mx:DataGridColumn headerText="DeleteReason" dataField="@deleteReason"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:HBox>

                    <mx:HBox label="历史明细">
                        <mx:DataGrid width="100%" height="100%" id="dg_historicDetail">
                            <mx:columns>
                                <mx:DataGridColumn headerText="Id" dataField="@id"/>
                                <mx:DataGridColumn headerText="ExecutionId" dataField="@executionId"/>
                                <mx:DataGridColumn headerText="ProcessInstanceId" dataField="@processInstanceId"/>
                                <mx:DataGridColumn headerText="ActivityInstanceId" dataField="@activityInstanceId"/>
                                <mx:DataGridColumn headerText="TaskId" dataField="@taskId"/>
                                <mx:DataGridColumn headerText="Time" dataField="@time"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:HBox>
                </mx:TabNavigator>
            </mx:Canvas>
        </mx:VBox>

        <mx:VBox width="20%" height="100%" creationPolicy="all">
            <mx:Accordion id="propAccordion" width="100%" height="100%">
                <mx:Canvas label="流程引擎配置" width="100%" height="100%">
                    <mx:DataGrid id="dg_processEngine" width="100%" height="100%">
                        <mx:columns>
                            <mx:DataGridColumn width="120" headerText="Name" dataField="name"/>
                            <mx:DataGridColumn headerText="Value" dataField="value"/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:Canvas>

                <mx:Canvas label="流程定义" width="100%" height="100%">
                    <mx:DataGrid id="dg_processDefinition" width="100%" height="100%">
                        <mx:columns>
                            <mx:DataGridColumn width="120" headerText="Name" dataField="name"/>
                            <mx:DataGridColumn headerText="Value" dataField="value"/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:Canvas>

                <mx:Canvas label="变量信息" width="100%" height="100%">
                    <mx:DataGrid id="dg_variables" width="100%" height="100%">
                        <mx:columns>
                            <mx:DataGridColumn width="120" headerText="Name" dataField="@key"/>
                            <mx:DataGridColumn headerText="Value" dataField="value"/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:Canvas>
            </mx:Accordion>
        </mx:VBox>
    </mx:HDividedBox>
</mx:Application>
